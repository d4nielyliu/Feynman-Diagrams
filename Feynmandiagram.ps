%!PS-Adobe-2.0
%%Creator: dvips(k) 2020.1 Copyright 2020 Radical Eye Software
%%Title: Feynmandiagram.dvi
%%CreationDate: Wed Sep  2 15:48:32 2020
%%Pages: 1
%%PageOrder: Ascend
%%BoundingBox: 0 0 612 792
%%DocumentFonts: CMSL10 CMR10
%%DocumentPaperSizes: Letter
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips Feynmandiagram.dvi
%DVIPSParameters: dpi=600
%DVIPSSource:  TeX output 2020.09.02:1148
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/dir 0 def/dyy{/dir 0 def}B/dyt{/dir 1 def}B/dty{/dir 2 def}B/dtt{/dir 3
def}B/p{dir 2 eq{-90 rotate show 90 rotate}{dir 3 eq{-90 rotate show 90
rotate}{show}ifelse}ifelse}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0
N/Ry 0 N/V{}B/RV/v{/Ry X/Rx X V}B statusdict begin/product where{pop
false[(Display)(NeXT)(LaserWriter 16/600)]{A length product length le{A
length product exch 0 exch getinterval eq{pop true exit}if}{pop}ifelse}
forall}{false}ifelse end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{
BDot}imagemask grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat
{BDot}imagemask grestore}}ifelse B/QV{gsave newpath transform round exch
round exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0
rlineto fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B
/M{S p delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}
B/g{0 M}B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p
-3 w}B/n{p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{
0 S rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: l3backend-dvips.pro 0 0
%%
%% This is file `l3backend-dvips.pro',
%% generated with the docstrip utility.
%%
%% The original source files were:
%%
%% l3backend-header.dtx  (with options: `header,dvips')
%% 
%% Copyright (C) 1990-2020 The LaTeX3 Project
%% 
%% It may be distributed and/or modified under the conditions of
%% the LaTeX Project Public License (LPPL), either version 1.3c of
%% this license or (at your option) any later version.  The latest
%% version of this license is in the file:
%% 
%%    https://www.latex-project.org/lppl.txt
%% 
%% This file is part of the "l3backend bundle" (The Work in LPPL)
%% and all files in that bundle must be distributed together.
%% 
%% File: l3backend-header.dtx
true setglobal
/pdf.globaldict 4 dict def
false setglobal

/pdf.cvs { 65534 string cvs } def
/pdf.dvi.pt { 72.27 mul Resolution div } def
/pdf.pt.dvi { 72.27 div Resolution mul } def
/pdf.rect.ht { dup 1 get neg exch 3 get add } def
/pdf.linkmargin { 1 pdf.pt.dvi } def
/pdf.linkdp.pad { 0 } def
/pdf.linkht.pad { 0 } def
/pdf.rect
  { /Rect [ pdf.llx pdf.lly pdf.urx pdf.ury ] } def
/pdf.save.ll
  {
    currentpoint
    /pdf.lly exch def
    /pdf.llx exch def
  }
    def
/pdf.save.ur
  {
    currentpoint
    /pdf.ury exch def
    /pdf.urx exch def
  }
    def
/pdf.save.linkll
  {
    currentpoint
    pdf.linkmargin add
    pdf.linkdp.pad add
    /pdf.lly exch def
    pdf.linkmargin sub
    /pdf.llx exch def
  }
    def
/pdf.save.linkur
  {
    currentpoint
    pdf.linkmargin sub
    pdf.linkht.pad sub
    /pdf.ury exch def
    pdf.linkmargin add
    /pdf.urx exch def
  }
    def
/pdf.dest.anchor
  {
    currentpoint exch
    pdf.dvi.pt 72 add
    /pdf.dest.x exch def
    pdf.dvi.pt
    vsize 72 sub exch sub
    /pdf.dest.y exch def
  }
    def
/pdf.dest.point
  { pdf.dest.x pdf.dest.y } def
/pdf.dest2device
  {
    /pdf.dest.y exch def
    /pdf.dest.x exch def
    matrix currentmatrix
    matrix defaultmatrix
    matrix invertmatrix
    matrix concatmatrix
    cvx exec
    /pdf.dev.y exch def
    /pdf.dev.x exch def
    /pdf.tmpd exch def
    /pdf.tmpc exch def
    /pdf.tmpb exch def
    /pdf.tmpa exch def
    pdf.dest.x pdf.tmpa mul
      pdf.dest.y pdf.tmpc mul add
      pdf.dev.x add
    pdf.dest.x pdf.tmpb mul
     pdf.dest.y pdf.tmpd mul add
     pdf.dev.y add
  }
    def
/pdf.bordertracking false def
/pdf.bordertracking.begin
  {
    SDict /pdf.bordertracking true put
    SDict /pdf.leftboundary undef
    SDict /pdf.rightboundary undef
    /a where
      {
        /a
          {
            currentpoint pop
            SDict /pdf.rightboundary known dup
              {
                SDict /pdf.rightboundary get 2 index lt
                  { not }
                if
              }
            if
              { pop }
              { SDict exch /pdf.rightboundary exch put }
            ifelse
            moveto
            currentpoint pop
            SDict /pdf.leftboundary known dup
              {
                SDict /pdf.leftboundary get 2 index gt
                  { not }
                if
              }
            if
              { pop }
              { SDict exch /pdf.leftboundary exch put }
            ifelse
          }
        put
      }
    if
  }
    def
/pdf.bordertracking.end
  {
    /a where { /a { moveto } put } if
    /x where { /x { 0 exch rmoveto } put } if
    SDict /pdf.leftboundary known
      { pdf.outerbox 0 pdf.leftboundary put }
    if
    SDict /pdf.rightboundary known
      { pdf.outerbox 2 pdf.rightboundary put }
    if
    SDict /pdf.bordertracking false put
  }
    def
  /pdf.bordertracking.endpage
{
  pdf.bordertracking
    {
      pdf.bordertracking.end
      true setglobal
      pdf.globaldict
        /pdf.brokenlink.rect [ pdf.outerbox aload pop ] put
      pdf.globaldict
        /pdf.brokenlink.skip pdf.baselineskip put
      pdf.globaldict
        /pdf.brokenlink.dict
          pdf.link.dict pdf.cvs put
      false setglobal
      mark pdf.link.dict cvx exec /Rect
        [
          pdf.llx
          pdf.lly
          pdf.outerbox 2 get pdf.linkmargin add
          currentpoint exch pop
          pdf.outerbox pdf.rect.ht sub pdf.linkmargin sub
        ]
      /ANN pdf.pdfmark
    }
  if
}
  def
/pdf.bordertracking.continue
  {
    /pdf.link.dict pdf.globaldict
      /pdf.brokenlink.dict get def
    /pdf.outerbox pdf.globaldict
      /pdf.brokenlink.rect get def
    /pdf.baselineskip pdf.globaldict
      /pdf.brokenlink.skip get def
    pdf.globaldict dup dup
    /pdf.brokenlink.dict undef
    /pdf.brokenlink.skip undef
    /pdf.brokenlink.rect undef
    currentpoint
    /pdf.originy exch def
    /pdf.originx exch def
    /a where
      {
        /a
          {
            moveto
            SDict
            begin
            currentpoint pdf.originy ne exch
              pdf.originx ne or
              {
                pdf.save.linkll
                /pdf.lly
                  pdf.lly pdf.outerbox 1 get sub def
                pdf.bordertracking.begin
              }
            if
            end
          }
        put
      }
    if
    /x where
      {
        /x
          {
            0 exch rmoveto
            SDict~
            begin
            currentpoint
            pdf.originy ne exch pdf.originx ne or
              {
                pdf.save.linkll
                /pdf.lly
                  pdf.lly pdf.outerbox 1 get sub def
                pdf.bordertracking.begin
              }
            if
            end
          }
        put
      }
    if
  }
    def
/pdf.breaklink
  {
    pop
    counttomark 2 mod 0 eq
      {
        counttomark /pdf.count exch def
          {
           pdf.count 0 eq { exit } if
           counttomark 2 roll
           1 index /Rect eq
             {
               dup 4 array copy
               dup dup
                 1 get
                 pdf.outerbox pdf.rect.ht
                 pdf.linkmargin 2 mul add sub
                 3 exch put
               dup
                 pdf.outerbox 2 get
                 pdf.linkmargin add
                 2 exch put
               dup dup
                 3 get
                 pdf.outerbox pdf.rect.ht
                 pdf.linkmargin 2 mul add add
                 1 exch put
               /pdf.currentrect exch  def
               pdf.breaklink.write
                 {
                   pdf.currentrect
                   dup
                     pdf.outerbox 0 get
                     pdf.linkmargin sub
                     0 exch put
                   dup
                     pdf.outerbox 2 get
                     pdf.linkmargin add
                     2 exch put
                   dup dup
                     1 get
                     pdf.baselineskip add
                     1 exch put
                   dup dup
                     3 get
                     pdf.baselineskip add
                     3 exch put
                   /pdf.currentrect exch def
                   pdf.breaklink.write
                  }
                1 index 3 get
                pdf.linkmargin 2 mul add
                pdf.outerbox pdf.rect.ht add
                2 index 1 get sub
                pdf.baselineskip div round cvi 1 sub
                exch
              repeat
              pdf.currentrect
              dup
                pdf.outerbox 0 get
                pdf.linkmargin sub
                0 exch put
              dup dup
                1 get
                pdf.baselineskip add
                1 exch put
              dup dup
                3 get
                pdf.baselineskip add
                3 exch put
              dup 2 index 2 get  2 exch put
              /pdf.currentrect exch def
              pdf.breaklink.write
              SDict /pdf.pdfmark.good false put
              exit
            }
            { pdf.count 2 sub /pdf.count exch def }
          ifelse
        }
      loop
    }
  if
  /ANN
}
  def
/pdf.breaklink.write
  {
    counttomark 1 sub
    index /_objdef eq
      {
        counttomark -2 roll
        dup wcheck
          {
            readonly
            counttomark 2 roll
          }
          { pop pop }
        ifelse
      }
    if
    counttomark 1 add copy
    pop pdf.currentrect
    /ANN pdfmark
  }
    def
/pdf.pdfmark
  {
    SDict /pdf.pdfmark.good true put
    dup /ANN eq
      {
        pdf.pdfmark.store
        pdf.pdfmark.dict
          begin
            Subtype /Link eq
            currentdict /Rect known and
            SDict /pdf.outerbox known and
            SDict /pdf.baselineskip known and
              {
                Rect 3 get
                pdf.linkmargin 2 mul add
                pdf.outerbox pdf.rect.ht add
                Rect 1 get sub
                pdf.baselineskip div round cvi 0 gt
                  { pdf.breaklink }
                if
              }
            if
          end
        SDict /pdf.outerbox undef
        SDict /pdf.baselineskip undef
        currentdict /pdf.pdfmark.dict undef
      }
    if
    pdf.pdfmark.good
      { pdfmark }
      { cleartomark }
    ifelse
  }
    def
/pdf.pdfmark.store
  {
    /pdf.pdfmark.dict 65534 dict def
    counttomark 1 add copy
    pop
      {
        dup mark eq
          {
            pop
            exit
          }
          {
            pdf.pdfmark.dict
            begin def end
          }
        ifelse
      }
    loop
}
  def
%% 
%%
%% End of file `l3backend-dvips.pro'.

%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/@beginspecial{SDict begin/SpecialSave save N gsave
normalscale currentpoint TR @SpecialDefaults count/ocount X/dcount
countdictstack N}N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto
0 vs rlineto hs neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale
ang rotate rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}
ifelse scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale
llx neg lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly
lineto urx ury lineto llx ury lineto closepath clip}if/showpage{}N
/erasepage{}N/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{
count ocount sub{pop}repeat countdictstack dcount sub{end}repeat
grestore SpecialSave restore end}N/@defspecial{SDict begin}N
/@fedspecial{end}B/li{lineto}B/rl{rlineto}B/rc{rcurveto}B/np{/SaveX
currentpoint/SaveY X N 1 setlinecap newpath}N/st{stroke SaveX SaveY
moveto}N/fil{fill SaveX SaveY moveto}N/ellipse{/endangle X/startangle X
/yrad X/xrad X/savematrix matrix currentmatrix N TR xrad yrad scale 0 0
1 startangle endangle arc savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
TeXDict begin @defspecial

 /savecolor { /oldcolor [ [ currentcolor ] currentcolorspace ] def
} def /restorecolor { oldcolor aload pop setcolorspace aload pop setcolor
} def savecolor

 /pi 3.141592 def /ed{exch def}def /gs{gsave 1.00375 div dup scale}def
/gsw{ gs /width ed width setlinewidth }def /p1{/y1 ed /x1 ed}def /p2{/y2
ed /x2 ed}def /p3{/y3 ed /x3 ed}def /p4{/y4 ed /x4 ed}def /pp1{/yy1
ed /xx1 ed}def /pp2{/yy2 ed /xx2 ed}def /pp3{/yy3 ed /xx3 ed}def /setabs{
dup load abs def }def /normalizearc { translate exch dup rotate sub
3 2 roll { neg 1 -1 scale } if dup abs 360 ge { pop 360 } { dup dup
0 lt { 360 sub } if 360 div truncate 360 mul sub dup 0.1 lt { pop 360
} if }ifelse } def /normalizeline { 3 index 3 index translate 2 index
sub exch 3 index sub 2 copy 2 copy 0 ne exch 0 ne or {atan rotate}
{pop pop} ifelse dup mul exch dup mul add sqrt 3 1 roll pop pop } def
/abox{ newpath x1 y1 moveto x1 y2 lineto x2 y2 lineto x2 y1 lineto
closepath }def /atriangle{ newpath x1 y1 moveto x2 y2 lineto x3 y3
lineto closepath }def /abezier{ newpath x1 y1 moveto x2 y2 x3 y3 x4
y4 curveto }def /distance{ dup 3 index sub dup mul 2 index 5 index
sub dup mul add sqrt } def /setbackgroundcolor{ 0 0 0 0 setcmykcolor
} def

 /getarrow { /witharrow ed /arrowpos ed /arrowaspect ed /arrowscale
ed /arrowinset ed /arrowlength ed /arrowwidth ed /arrowstroke ed }
def /drawarrow { gsave [] 0 setdash rotate arrowwidth 0 eq { arrowlength
0 eq { linewidth linesep 0.7 mul add 1 add 1.2 mul dup 2.5 lt { pop
2.5 } if arrowscale mul /arrowwidth ed /arrowlength arrowwidth 2 mul
arrowaspect mul def } { /arrowlength arrowlength arrowscale mul def
/arrowwidth arrowlength 2 div arrowaspect div def } ifelse } { arrowlength
0 eq { /arrowwidth arrowwidth arrowscale mul def /arrowlength arrowwidth
2 mul arrowaspect mul def } { /arrowwidth arrowwidth arrowscale mul
def /arrowlength arrowlength arrowscale mul def } ifelse } ifelse arrowstroke
0 ne { arrowstroke setlinewidth gsave setbackgroundcolor newpath 0
arrowlength -0.5 mul moveto arrowwidth arrowlength rlineto arrowwidth
-1 mul arrowlength arrowinset mul -1 mul rlineto arrowwidth -1 mul
arrowlength arrowinset mul rlineto closepath fill grestore newpath
0 arrowlength -0.5 mul moveto arrowwidth arrowlength rlineto arrowwidth
-1 mul arrowlength arrowinset mul -1 mul rlineto arrowwidth -1 mul
arrowlength arrowinset mul rlineto closepath stroke } { newpath 0 arrowlength
-0.5 mul moveto arrowwidth arrowlength rlineto arrowwidth -1 mul arrowlength
arrowinset mul -1 mul rlineto arrowwidth -1 mul arrowlength arrowinset
mul rlineto closepath fill } ifelse grestore } def

 /fixdash{ 2 copy gt 1 index 0 ne and { 2 copy 2 mul div 0.5 sub round
dup 0 le { pop 0 } if 2 mul 1 add exch pop div dup 2 array astore 0
setdash } { pop pop [] 0 setdash } ifelse } def

 /dashline{ gsave distance dsize fixdash newpath moveto lineto stroke
grestore } def

 /dasharc{ gsave 3 copy sub abs pi mul 180 div mul 3 index angdsize
mul fixdash newpath arc stroke grestore } def

 /dashgluon{ gsw /dsize ed /num ed /ampi ed normalizeline /dr ed /num
num 0.5 sub round def dsize 0 eq { [] 0 setdash } { /amp8 ampi abs
0.9 mul def /size amp8 neg 0 amp8 neg ampi 2 mul dup dr num 2 mul 2
add div exch 1 lengthofbezier def /ndash size dsize 2 mul div truncate
def ndash 0 eq { /ndash 1 def } if size 2 dsize ndash mul mul sub abs
size 2 dsize ndash 1 add mul mul sub abs gt { /ndash ndash 1 add def
} if /dsize size 2 ndash mul div def [ dsize dsize ] dsize 2 div setdash
} ifelse /inc dr num 2 mul 2 add div def /amp8 ampi 0.9 mul def amp8
0 lt {/amp8 amp8 neg def} if /x1 inc 2 mul def newpath x1 ampi neg
moveto x1 amp8 add dup ampi neg exch ampi inc 1.4 mul ampi curveto
inc 0.5 mul ampi inc 0.1 mul ampi 0.5 mul 0 0 curveto stroke newpath
x1 ampi neg moveto 2 1 num { pop x1 amp8 sub dup ampi neg exch ampi
dup x1 inc add exch curveto /x1 x1 inc dup add add def x1 amp8 add
dup ampi exch ampi neg dup x1 exch curveto } for x1 amp8 sub dup ampi
neg exch ampi dup x1 inc 0.6 mul add exch curveto x1 inc 1.5 mul add
ampi dr inc 0.1 mul sub ampi 0.5 mul dr 0 curveto stroke grestore }
def

 /dashdoublephoton{ gsw /dsize ed /linesep ed /num ed /ampi ed normalizeline
/dr ed /num num 2 mul 0.5 sub round def dsize 0 eq { [] 0 setdash }
{ /xdd dr num div def /size 4 3 div xdd mul pi div dup neg xdd add
4 3 div ampi mul dup 3 1 roll xdd 0 1 lengthofbezier 2 div def /ndash
size dsize 2 mul div truncate def ndash 0 eq { /ndash 1 def } if size
2 dsize ndash mul mul sub abs size 2 dsize ndash 1 add mul mul sub
abs gt { /ndash ndash 1 add def } if /dsize size 2 ndash mul div def
[ dsize dsize ] dsize 2 div setdash } ifelse linesep 0 eq { 0 0 dr
0 ampi num photon1 } { linesep width add setlinewidth 0 0 dr 0 ampi
num photon1 [] 0 setdash 0 0 0 0 setcmykcolor linesep width sub setlinewidth
0 0 dr 0 ampi num photon1 } ifelse grestore } def

 /photon1{ gsave /num1 ed /ampi1 ed normalizeline /dr ed /x2 dr num1
div def /sign 1 def 1 1 num1 { pop newpath 0 0 moveto 4 3 div x2 mul
pi div dup neg x2 add 4 3 div ampi1 sign mul mul dup 3 1 roll x2 0
curveto stroke /sign sign neg def x2 0 translate } for grestore } def

 /dashdoublezigzag{ gsw /dsize ed /linesep ed /num ed /ampi ed normalizeline
/dr ed /num num 2 mul 0.5 sub round def dsize 0 eq { [] 0 setdash }
{ /size dr num 2 mul div dup mul ampi dup mul add sqrt def /ndash size
dsize 2 mul div truncate def ndash 0 eq { /ndash 1 def } if size 2
dsize ndash mul mul sub abs size 2 dsize ndash 1 add mul mul sub abs
gt { /ndash ndash 1 add def } if /dsize size 2 ndash mul div def [
dsize dsize ] dsize 2 div setdash } ifelse linesep 0 eq { 0 0 dr 0
ampi num zigzag1 } { linesep width add setlinewidth 0 0 dr 0 ampi num
zigzag1 [] 0 setdash 0 0 0 0 setcmykcolor linesep width sub setlinewidth
0 0 dr 0 ampi num zigzag1 } ifelse grestore } def

 /zigzag1{ gsave /num1 ed /ampi1 ed normalizeline /dr ed /x2 dr num1
div def /sign 1 def 1 1 num1 { pop newpath 0 0 moveto x2 2 div ampi1
sign mul lineto x2 0 lineto stroke /sign sign neg def x2 0 translate
} for grestore } def

 /dashgluearc{ gsw normalizearc /darc ed /radius ed /dsize ed /num
ed /ampi ed /num num 0.5 sub round def dsize 0 eq { [] 0 setdash }
{ /dr radius darc mul pi mul 180 div def /const darc dr div def /inc
dr num 2 mul 2 add div def /amp8 ampi 0.9 mul def /amp1 radius ampi
add def /amp2 radius ampi sub def /amp4 amp1 inc amp8 add const mul
cos div def /amp5 amp2 amp8 const mul cos div def amp8 0 lt {/amp8
amp8 neg def} if /x1 inc 2 mul def /x0 x1 const mul cos amp2 mul def
/y0 x1 const mul sin amp2 mul def x1 amp8 sub const mul dup cos amp5
mul x0 sub exch sin amp5 mul y0 sub x1 amp8 sub const mul dup cos amp4
mul x0 sub exch sin amp4 mul y0 sub x1 inc add const mul dup cos amp1
mul x0 sub exch sin amp1 mul y0 sub 1 lengthofbezier /size ed /ndash
size dsize 2 mul div truncate def ndash 0 eq { /ndash 1 def } if size
2 dsize ndash mul mul sub abs size 2 dsize ndash 1 add mul mul sub
abs gt { /ndash ndash 1 add def } if /dsize size 2 ndash mul div def
[ dsize dsize ] dsize 2 div setdash } ifelse /dr radius darc mul pi
mul 180 div def /const darc dr div def /inc dr num 2 mul 2 add div
def /amp8 ampi 0.9 mul def /amp1 radius ampi add def /amp2 radius ampi
sub def /amp3 radius ampi 2 div add def /amp4 amp1 inc amp8 add const
mul cos div def /amp5 amp2 amp8 const mul cos div def /amp6 amp1 inc
0.6 mul amp8 add const mul cos div def /amp7 amp1 inc 0.9 mul const
mul cos div def amp8 0 lt {/amp8 amp8 neg def} if newpath /x1 inc 2
mul def x1 const mul dup cos amp2 mul exch sin amp2 mul moveto x1 amp8
add const mul dup cos amp5 mul exch sin amp5 mul x1 amp8 add const
mul dup cos amp6 mul exch sin amp6 mul inc 1.4 mul const mul dup cos
amp1 mul exch sin amp1 mul curveto inc 0.5 mul const mul dup cos amp7
mul exch sin amp7 mul inc 0.1 mul const mul dup cos amp3 mul exch sin
amp3 mul radius 0 curveto stroke newpath x1 const mul dup cos amp2
mul exch sin amp2 mul moveto 2 1 num { pop x1 amp8 sub const mul dup
cos amp5 mul exch sin amp5 mul x1 amp8 sub const mul dup cos amp4 mul
exch sin amp4 mul x1 inc add const mul dup cos amp1 mul exch sin amp1
mul curveto /x1 x1 inc dup add add def x1 amp8 add const mul dup cos
amp4 mul exch sin amp4 mul x1 amp8 add const mul dup cos amp5 mul exch
sin amp5 mul x1 const mul dup cos amp2 mul exch sin amp2 mul curveto
} for x1 amp8 sub const mul dup cos amp5 mul exch sin amp5 mul x1 amp8
sub const mul dup cos amp6 mul exch sin amp6 mul x1 inc 0.6 mul add
const mul dup cos amp1 mul exch sin amp1 mul curveto x1 inc 1.5 mul
add const mul dup cos amp7 mul exch sin amp7 mul dr inc 0.1 mul sub
const mul dup cos amp3 mul exch sin amp3 mul dr const mul dup cos radius
mul exch sin radius mul curveto stroke grestore } def

 /dashdoublephotonarc{ gsw normalizearc /darc ed /radius ed /dsize
ed /linesep ed /num ed /ampli ed /num num 2 mul round def /darc1 darc
num div def /cp darc1 cos def /sp darc1 sin def darc1 2 div dup /cp2
exch cos def /sp2 exch sin def dsize 0 eq { [] 0 setdash } { /ampli1
ampli def /beta radius darc1 mul 180 ampli1 mul div def /tt sp cp beta
mul sub cp sp beta mul add div def /amp1 radius ampli1 add 8 mul beta
cp2 mul sp2 sub mul beta 4 cp add mul tt cp mul 3 mul sp 4 mul sub
add radius mul sub beta tt sub 3 mul div def radius ampli1 add 8 mul
cp2 mul 1 cp add radius mul sub 3 div amp1 sub dup radius sub exch
radius sub beta mul amp1 radius sub amp1 radius cp mul sub tt mul radius
sp mul add radius cp mul radius sub radius sp mul 1 lengthofbezier
/len1 ed /ampli1 ampli1 neg def /beta radius darc1 mul 180 ampli1 mul
div def /tt sp cp beta mul sub cp sp beta mul add div def /amp1 radius
ampli1 add 8 mul beta cp2 mul sp2 sub mul beta 4 cp add mul tt cp mul
3 mul sp 4 mul sub add radius mul sub beta tt sub 3 mul div def radius
ampli1 add 8 mul cp2 mul 1 cp add radius mul sub 3 div amp1 sub dup
radius sub exch radius sub beta mul amp1 radius sub amp1 radius cp
mul sub tt mul radius sp mul add radius cp mul radius sub radius sp
mul 1 lengthofbezier /len2 ed /size len1 len2 add 2 div def /size2
len1 2 div def /ndash size dsize 2 mul div truncate def ndash 0 eq
{ /ndash 1 def } if size 2 dsize ndash mul mul sub abs size 2 dsize
ndash 1 add mul mul sub abs gt { /ndash ndash 1 add def } if /dsize
size 2 ndash mul div def /numd size2 dsize 2 mul div truncate def /dstart
dsize 2 div size2 sub 2 numd dsize mul mul add def dstart 0 lt { /dstart
dstart dsize 2 mul add def } if [ dsize dsize ] dstart setdash } ifelse
linesep 0 eq { radius photonarc1 } { linesep width add setlinewidth
radius photonarc1 [] 0 setdash 0 0 0 0 setcmykcolor linesep width sub
setlinewidth radius photonarc1 } ifelse grestore } def

 /photonarc1{ gsave /radius1 ed /ampli1 ampli def newpath radius1 0
moveto 1 1 num { 1 sub /ii ed /cpi darc1 ii mul cos def /spi darc1
ii mul sin def /beta radius1 darc1 mul 180 ampli1 mul div def /tt sp
cp beta mul sub cp sp beta mul add div def /x2 radius1 ampli1 add 8
mul beta cp2 mul sp2 sub mul beta 4 cp add mul tt cp mul 3 mul sp 4
mul sub add radius1 mul sub beta tt sub 3 mul div def /x1 radius1 ampli1
add 8 mul cp2 mul 1 cp add radius1 mul sub 3 div x2 sub def /y1 x1
radius1 sub beta mul def /y2 x2 radius1 cp mul sub tt mul radius1 sp
mul add def /x3 radius1 cp mul def /y3 radius1 sp mul def x1 cpi mul
y1 spi mul sub y1 cpi mul x1 spi mul add x2 cpi mul y2 spi mul sub
y2 cpi mul x2 spi mul add x3 cpi mul y3 spi mul sub y3 cpi mul x3 spi
mul add curveto /ampli1 ampli1 neg def } for stroke grestore } def

 /dashdoublezigzagarc{ gsw normalizearc /darc ed /radius ed /dsize
ed /linesep ed /num ed /ampli ed /num num 2 mul round def /darc1 darc
num div def /cp darc1 cos def /sp darc1 sin def darc1 2 div dup /cp2
exch cos def /sp2 exch sin def dsize 0 eq { [] 0 setdash } { /size
ampli dup mul radius dup mul add radius dup mul ampli dup mul sub cp
mul sub 2 div sqrt def /size2 ampli dup mul ampli radius add radius
mul 2 mul 1 cp2 sub mul add sqrt def /ndash size dsize 2 mul div truncate
def ndash 0 eq { /ndash 1 def } if size 2 dsize ndash mul mul sub abs
size 2 dsize ndash 1 add mul mul sub abs gt { /ndash ndash 1 add def
} if /dsize size 2 ndash mul div def /numd size2 dsize 2 mul div truncate
def /dstart dsize 2 div size2 sub 2 numd dsize mul mul add def dstart
0 lt { /dstart dstart dsize 2 mul add def } if [ dsize dsize ] dstart
setdash } ifelse linesep 0 eq { radius zigzagarc1 } { linesep width
add setlinewidth radius zigzagarc1 [] 0 setdash 0 0 0 0 setcmykcolor
linesep width sub setlinewidth radius zigzagarc1 } ifelse grestore
} def

 /zigzagarc1{ gsave /radius1 ed /ampli1 ampli def /darc2 darc1 2 div
def newpath radius1 0 moveto darc2 dup sin exch cos radius1 ampli1
add mul exch radius1 ampli1 add mul lineto /ampli1 ampli1 neg def /num1
num 1 sub def 1 1 num1 { darc1 mul darc2 add dup sin exch cos radius1
ampli1 add mul exch radius1 ampli1 add mul lineto /ampli1 ampli1 neg
def } for num darc1 mul dup sin exch cos radius1 mul exch radius1 mul
lineto stroke grestore } def

 /dashgluoncirc{ gsw translate /phase ed /radius ed /dsize ed /num
ed /ampi ed /num num 0.5 sub round def /darc 180 num div def darc phase
add rotate dsize 0 eq { [] 0 setdash } { /dr radius 2 mul pi mul def
/inc dr 2 num mul div def /const 360 dr div def /amp8 ampi 0.9 mul
def /amp1 radius ampi add def /amp2 radius ampi sub def /amp4 amp1
inc amp8 add const mul cos div def /amp5 amp2 amp8 const mul cos div
def amp8 0 lt {/amp8 amp8 neg def} if /xx inc 2 mul def /x0 amp1 inc
const mul cos mul def /y0 amp1 inc const mul sin mul def amp4 xx amp8
add const mul cos mul x0 sub amp4 xx amp8 add const mul sin mul y0
sub amp5 xx amp8 add const mul cos mul x0 sub amp5 xx amp8 add const
mul sin mul y0 sub amp2 xx const mul cos mul x0 sub amp2 xx const mul
sin mul y0 sub 1 lengthofbezier /size ed /ndash size dsize 2 mul div
truncate def ndash 0 eq { /ndash 1 def } if size 2 dsize ndash mul
mul sub abs size 2 dsize ndash 1 add mul mul sub abs gt { /ndash ndash
1 add def } if /dsize size 2 ndash mul div def [ dsize dsize ] dsize
2 div setdash } ifelse /dr radius 2 mul pi mul def /inc dr 2 num mul
div def /const 360 dr div def /amp8 ampi 0.9 mul def /amp1 radius ampi
add def /amp2 radius ampi sub def /amp4 amp1 inc amp8 add const mul
cos div def /amp5 amp2 amp8 const mul cos div def amp8 0 lt {/amp8
amp8 neg def} if newpath /xx inc 2 mul def amp1 inc const mul cos mul
amp1 inc const mul sin mul moveto 1 1 num { pop amp4 xx amp8 add const
mul cos mul amp4 xx amp8 add const mul sin mul amp5 xx amp8 add const
mul cos mul amp5 xx amp8 add const mul sin mul amp2 xx const mul cos
mul amp2 xx const mul sin mul curveto amp5 xx amp8 sub const mul cos
mul amp5 xx amp8 sub const mul sin mul amp4 xx amp8 sub const mul cos
mul amp4 xx amp8 sub const mul sin mul amp1 xx inc add const mul cos
mul amp1 xx inc add const mul sin mul curveto /xx xx inc 2 mul add
def } for stroke grestore } def

 /arc2{ gsw normalizearc /darc ed /radius ed /dsize ed /linesep ed
/angdsize dsize radius div def /flip ed getarrow /arcmid darc arrowpos
mul def /linewidth width def dsize 0 eq { linesep 0 eq { 0 0 radius
0 darc dasharc } { gsave linesep linewidth add setlinewidth 0 0 radius
0 darc dasharc setbackgroundcolor [] 0 setdash linesep linewidth sub
setlinewidth 0 0 radius 0 darc dasharc grestore } ifelse } { linesep
0 eq { 0 0 radius 0 arcmid dasharc 0 0 radius arcmid darc dasharc }
{ gsave linesep linewidth add setlinewidth 0 0 radius 0 arcmid dasharc
0 0 radius arcmid darc dasharc setbackgroundcolor [] 0 setdash linesep
linewidth sub setlinewidth 0 0 radius 0 darc dasharc grestore } ifelse
} ifelse arcmid rotate radius 0 translate flip { 0 } { 180 } ifelse
witharrow { drawarrow } if grestore } def

 /dasharrowdoubleline{ gsw normalizeline /dr ed /dsize ed /linesep
ed /flip ed getarrow /linesep setabs /linewidth width def linesep 0
eq { 0 0 dr 0 dashline } { gsave linesep linewidth add setlinewidth
0 0 dr 0 dashline setbackgroundcolor [] 0 setdash linesep linewidth
sub setlinewidth 0 0 dr 0 newpath moveto lineto stroke grestore } ifelse
dr arrowpos mul 0 translate flip { -90 }{ 90 } ifelse witharrow { drawarrow
} if grestore } def

 /vertex{ gs /dotsize ed translate newpath 0 0 dotsize 0 360 arc fill
stroke grestore } def

 /ecirc{ gsw /radius ed translate newpath 0 0 radius 0 360 arc stroke
grestore } def

 /ebox{ gsw p2 p1 abox stroke grestore } def

 /fbox{ gsw p2 p1 abox fill grestore } def

 /triangle{ gsw p3 p2 p1 atriangle stroke grestore } def

 /ftriangle{ gsw p3 p2 p1 atriangle fill grestore } def

 /ellipse { /r2 exch def /r1 exch def /kappa 0.5522847498 def newpath
0 r2 moveto kappa r1 mul r2 r1 kappa r2 mul r1 0 curveto r1 kappa r2
mul neg kappa r1 mul r2 neg 0 r2 neg curveto kappa r1 mul neg r2 neg
r1 neg kappa r2 mul neg r1 neg 0 curveto r1 neg kappa r2 mul kappa
r1 mul neg r2 0 r2 curveto } def

 /goval{ gsw /gcolor ed /angle ed /width ed /height ed translate angle
rotate 1 setgray width height ellipse fill gcolor setgray width height
ellipse fill 0 setgray width height ellipse stroke grestore } def

 /foval{ gsw /angle ed /width ed /height ed translate angle rotate
width height ellipse fill grestore } def

 /oval{ gsw /angle ed /width ed /height ed translate angle rotate width
height ellipse stroke grestore } def

 /polygon{ gsw /points ed /ss points length 2 idiv 2 mul def ss 4 gt
{ newpath points 0 get points 1 get moveto 0 2 ss 4 sub { /ii ed /x1
points ii 2 add get def /y1 points ii 3 add get def x1 y1 lineto }
for closepath stroke } if grestore } def

 /filledpolygon{ gsw /points ed /ss points length 2 idiv 2 mul def
ss 4 gt { newpath points 0 get points 1 get moveto 0 2 ss 4 sub { /ii
ed /x1 points ii 2 add get def /y1 points ii 3 add get def x1 y1 lineto
} for closepath fill } if grestore } def

 /docurve{ x1 2 mul x2 add 3 div y1 y0 sub x1 x0 sub div x2 x0 sub
mul y2 y0 sub x2 x0 sub div x1 x0 sub mul add y1 add y0 2 mul add 3
div x1 x2 2 mul add 3 div y2 y3 sub x2 x3 sub div x1 x3 sub mul y1
y3 sub x1 x3 sub div x2 x3 sub mul add y2 add y3 2 mul add 3 div x2
y2 curveto } def

 /makecurve{ gsw /points ed /ss points length 2 idiv 2 mul def newpath
ss 4 gt { /x1 points 0 get def /y1 points 1 get def /x2 points 2 get
def /y2 points 3 get def /x3 points 4 get def /y3 points 5 get def
/x0 x1 2 mul x2 sub def /y0 y3 y2 sub x3 x2 sub div y2 y1 sub x2 x1
sub div sub 2 mul x2 x1 sub dup mul x3 x1 sub div mul y1 2 mul add
y2 sub def x1 y1 moveto docurve 0 2 ss 8 sub { /ii ed /x0 points ii
get def /y0 points ii 1 add get def /x1 points ii 2 add get def /y1
points ii 3 add get def /x2 points ii 4 add get def /y2 points ii 5
add get def /x3 points ii 6 add get def /y3 points ii 7 add get def
docurve } for /x0 points ss 6 sub get def /y0 points ss 5 sub get def
/x1 points ss 4 sub get def /y1 points ss 3 sub get def /x2 points
ss 2 sub get def /y2 points ss 1 sub get def /x3 x2 2 mul x1 sub def
/y3 y2 y1 sub x2 x1 sub div y1 y0 sub x1 x0 sub div sub 2 mul x2 x1
sub dup mul x2 x0 sub div mul y2 2 mul add y1 sub def docurve } { ss
4 eq { points 0 get points 1 get moveto points 2 get points 3 get lineto
} if } ifelse stroke grestore } def

 /makedashcurve{ gsw /dsize ed /points ed /ss points length 2 idiv
2 mul def newpath ss 4 gt { /x1 points 0 get def /y1 points 1 get def
/x2 points 2 get def /y2 points 3 get def /x3 points 4 get def /y3
points 5 get def /x0 x1 2 mul x2 sub def /y0 y3 y2 sub x3 x2 sub div
y2 y1 sub x2 x1 sub div sub 2 mul x2 x1 sub dup mul x3 x1 sub div mul
y1 2 mul add y2 sub def x1 y1 moveto docurve 0 2 ss 8 sub { /ii ed
/x0 points ii get def /y0 points ii 1 add get def /x1 points ii 2 add
get def /y1 points ii 3 add get def /x2 points ii 4 add get def /y2
points ii 5 add get def /x3 points ii 6 add get def /y3 points ii 7
add get def docurve } for /x0 points ss 6 sub get def /y0 points ss
5 sub get def /x1 points ss 4 sub get def /y1 points ss 3 sub get def
/x2 points ss 2 sub get def /y2 points ss 1 sub get def /x3 x2 2 mul
x1 sub def /y3 y2 y1 sub x2 x1 sub div y1 y0 sub x1 x0 sub div sub
2 mul x2 x1 sub dup mul x2 x0 sub div mul y2 2 mul add y1 sub def docurve
} { ss 4 eq { points 0 get points 1 get moveto points 2 get points
3 get lineto } if } ifelse centerdash stroke grestore } def

 /pathlength{ flattenpath /dist 0 def { /yfirst ed /xfirst ed /ymoveto
yfirst def /xmoveto xfirst def } { /ynext ed /xnext ed /dist dist ynext
yfirst sub dup mul xnext xfirst sub dup mul add sqrt add def /yfirst
ynext def /xfirst xnext def } {} {/ynext ymoveto def /xnext xmoveto
def /dist ynext yfirst sub dup mul xnext xfirst sub dup mul add sqrt
add def /yfirst ynext def /xfirst xnext def } pathforall dist } def

 /centerdash{ /pathlen pathlength def /jj pathlen dsize div 2.0 div
cvi def /ddsize pathlen jj 2.0 mul div def [ddsize] ddsize 2 div setdash
} def

 /logaxis{ gsw /offset ed /hashsize ed /nlogs ed normalizeline /rr
ed offset 0 le { /offset 1 def } if /offset offset ln 10 ln div dup
cvi sub dup 0 lt { 1 add } if def /lsize rr nlogs div def newpath 0
0 moveto rr 0 lineto 0 1 nlogs 1 add { offset sub lsize mul dup -0.001
gt { dup rr 0.001 add le { dup 0 moveto hashsize 1.2 mul lineto } if
} if } for stroke width 0.6 mul setlinewidth newpath 0 1 nlogs { /x2
ed 2 1 9 { ln 10 ln div x2 add offset sub lsize mul dup -0.001 gt {
dup rr 0.001 add le { dup 0 moveto hashsize 0.8 mul lineto } if } if
} for } for stroke grestore } def

 /linaxis{ gsw /offset ed /hashsize ed /perdec ed /numdec ed normalizeline
/rr ed /perdec perdec round dup 0 le { pop 1 } if def /offset offset
dup cvi perdec idiv perdec mul sub dup 0 lt {perdec add} if dup perdec
ge {perdec sub} if def newpath 0 0 moveto rr 0 lineto /x1 rr numdec
perdec mul div def /y1 rr numdec div def 0 1 numdec 1 add { y1 mul
offset x1 mul sub dup -0.001 gt { dup rr 0.001 add lt { dup 0 moveto
hashsize 1.2 mul lineto } if } if } for stroke width 0.6 mul setlinewidth
newpath /offset offset dup cvi sub def 0 1 numdec perdec mul { offset
sub x1 mul dup -0.001 ge { dup rr 0.001 add le { dup 0 moveto hashsize
0.8 mul lineto } if } if } for stroke grestore } def

 /dashbezier{ gsw /dsize ed p4 p3 p2 p1 dsize 0 ne { /size x2 x1 sub
y2 y1 sub x3 x1 sub y3 y1 sub x4 x1 sub y4 y1 sub 1 lengthofbezier
def /numdashes size dsize 2 mul div def numdashes 0 eq { /numdashes
1 def } if size dsize 2 mul numdashes mul sub abs size dsize 2 mul
numdashes 1 add mul sub abs gt { /numdashes 1 add def } if /dsize size
numdashes 2 mul div def [dsize dsize] dsize 2 div setdash } if abezier
stroke grestore } def

 /dashdoublebezier{ gsw /dsize ed /linesep ed /flip ed getarrow p4
p3 p2 p1 /linewidth width def /bsize x2 x1 sub y2 y1 sub x3 x1 sub
y3 y1 sub x4 x1 sub y4 y1 sub 1 lengthofbezier def dsize 0 ne { /numdashes
bsize dsize 2 mul div def numdashes 0 eq { /numdashes 1 def } if bsize
dsize 2 mul numdashes mul sub abs bsize dsize 2 mul numdashes 1 add
mul sub abs gt { /numdashes 1 add def } if /dsize bsize numdashes 2
mul div def [dsize dsize] dsize 2 div setdash } if linesep 0 ne { linesep
linewidth add setlinewidth abezier stroke gsave 0 0 0 0 setcmykcolor
linesep linewidth sub setlinewidth abezier stroke grestore } { abezier
stroke } ifelse witharrow { /tb arrowpos def /tbmax 1 def /tbmin 0
def { /sizeb x2 x1 sub y2 y1 sub x3 x1 sub y3 y1 sub x4 x1 sub y4 y1
sub tb lengthofbezier def sizeb bsize div arrowpos sub abs 0.0001 le
{ exit } if sizeb bsize div arrowpos gt { /tbmax tb def /tb tb tbmin
add 2 div def } { /tbmin tb def /tb tb tbmax add 2 div def } ifelse
} loop /ub 1 tb sub def x1 ub ub ub mul mul mul tb x2 3 mul ub mul
ub mul tb x3 3 mul ub mul x4 tb mul add mul add mul add y1 ub ub ub
mul mul mul tb y2 3 mul ub mul ub mul tb y3 3 mul ub mul y4 tb mul
add mul add mul add translate y4 tb dup mul mul y3 tb mul 2 3 tb mul
sub mul add y2 ub mul 1 3 tb mul sub mul add y1 ub dup mul mul sub
3 mul x4 tb dup mul mul x3 tb mul 2 3 tb mul sub mul add x2 ub mul
1 3 tb mul sub mul add x1 ub dup mul mul sub 3 mul atan rotate flip
{ -90 }{ 90 } ifelse drawarrow } if grestore } def

 /g16x1 { 0.095012509837637440185 } def /g16x2 { 0.281603550779258913230
} def /g16x3 { 0.458016777657227386342 } def /g16x4 { 0.617876244402643748447
} def /g16x5 { 0.755404408355003033895 } def /g16x6 { 0.865631202387831743880
} def /g16x7 { 0.944575023073232576078 } def /g16x8 { 0.989400934991649932596
} def /g16w1 { 0.189450610455068496285 } def /g16w2 { 0.182603415044923588867
} def /g16w3 { 0.169156519395002538189 } def /g16w4 { 0.149595988816576732081
} def /g16w5 { 0.124628971255533872052 } def /g16w6 { 0.095158511682492784810
} def /g16w7 { 0.062253523938647892863 } def /g16w8 { 0.027152459411754094852
} def /onepoint { /gpt ed /tpt 1 gpt add 2 div tmax mul def xc tpt
mul xb add tpt mul xa add dup mul yc tpt mul yb add tpt mul ya add
dup mul add sqrt /tpt 1 gpt sub 2 div tmax mul def xc tpt mul xb add
tpt mul xa add dup mul yc tpt mul yb add tpt mul ya add dup mul add
sqrt add 2 div } def /lengthofbezier { /tmax ed pp3 pp2 pp1 /xa xx1
3 mul def /xb xx2 xx1 2 mul sub 6 mul def /xc xx3 xx2 xx1 sub 3 mul
sub 3 mul def /ya yy1 3 mul def /yb yy2 yy1 2 mul sub 6 mul def /yc
yy3 yy2 yy1 sub 3 mul sub 3 mul def g16x1 onepoint g16w1 mul g16x2
onepoint g16w2 mul add g16x3 onepoint g16w3 mul add g16x4 onepoint
g16w4 mul add g16x5 onepoint g16w5 mul add g16x6 onepoint g16w6 mul
add g16x7 onepoint g16w7 mul add g16x8 onepoint g16w8 mul add tmax
mul } def

 /axogrid{ gsw translate /ny ed /nx ed /dy ed /dx ed /maxx nx dx mul
def /maxy ny dy mul def 0 1 nx { newpath dx mul dup 0 moveto maxy lineto
stroke } for 0 1 ny { newpath maxx exch dy mul dup 0 exch moveto lineto
stroke } for } def
 
@fedspecial end
%%BeginFont: CMR10
%!PS-AdobeFont-1.0: CMR10 003.002
%%Title: CMR10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMR10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMR10 known{/CMR10 findfont dup/UniqueID known{dup
/UniqueID get 5000793 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMR10 def
/FontBBox {-40 -250 1009 750 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMR10.) readonly def
/FullName (CMR10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 49 /one put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794D2DB9B8591E5F01442D8
569672CF86B91C3F79C5DDC97C190EE0082814A5B5A2A5E77C790F087E729079
24A5AC880DDED58334DD5E8DC6A0B2BD4F04B17334A74BF8FF5D88B7B678A04A
2255C050CB39A389106B0C672A1912AFA86A49EFD02E61E6509E50EE35E67944
8FC63D91C3D2794B49A0C2993832BC4CDC8F7BD7575AD61BCDF42E2E421AA93E
3FF9E4FAD980256D8B377043A07FC75D6169338028692CCA8CD1FE92FD60AD26
D57B7519B80A8F8DCE9CEE5CDF720AF268D3C14099498A843D76E3B6C0328F24
D36EFE7F5C4E5B5C612786200C8DE3A41EE5F1FFAF4097653CFCDC8F4FD32E0B
03EDB3E413283B9EFB0AC33B055617005BC9B0057FD68C52D1B0E67F0C571685
767F2AA85ADE4E0104A1C777733D5E318A22A9944336E5B98D965E50D31F357A
8B6EA5A0EA98E1B027CE68C2EDB149EDDD04ED74A1B3D206D471A0C11C11449B
DE190BBFEBC08C9E1B7513B43DA3134D6B11A2516E6E86B67F68C970A320D05E
94FEC57FB347606DF89989C33482BD09D011C55AA920319E7B26A205D3D0F004
22466F09C0482A164CFB27EF6ED2B040ECCC3DCAF345B5A73676F193D43123B7
72FD6CFC5E37930E61EBD5A6307E4DE70194E6384EC0D79DB6AD86D3B319A31C
8B0589D0FE28241D8ACE280D0530EE99C80723E560BB72AE9D53F4713181F491
344B06D3027BA4E9E94D4305BE1D817197C54C8FF56CD6964165F6448ECC8A8A
64B48B4F0FD69299A137589E2491A283509B21A3A5772F75B7602A9F60AE559B
07A58436D04222C73EAEA72DE9A5A441F88D27C11F4F91255EFE280E91A4ACAC
1E98A4E5E6C57B9AE86FD218C3CD8F24A4104156A80F13821384E529783C52C8
78B94AB3A0096090867ED32E8A30980E737922037F75F062BD83BF4F5929BC51
CC22AEE2DBBAAA001CFFBFF41D258424FAD888FFF1BEAB796A44E3126159E120
7E4025C676CF94888A1971AEF8B6764B3AF4A92D36FAF6FC56FD049710EE3782
BC2CD84FE2473F133BE03C1346B875463F126DCAB15C7A9BCC9A727D23611462
4E8D2BFD2466600285D79518712B8681ABCD69608E6AA9578F7BD771EC36E01A
5A17BC17E375020ECA59B43790ABEB9DF5F4FBBEF807E5699EFEAC563E1ACC5D
EFA336E75DE6D8248E9381BB110884FDC89C2F9A41EBBC9A8A1F98E6A41F68BE
EE30E25CA148C1EFF42DFF8C214A6537AB11F260B8C329A4947B5FC8DC9C5622
4DF7BF4FBFB00380D47BABB03BC30627AA74103E553F55278F538EDD8C1E64CE
0F1398CA0AB5A86630139B4A7E8FC02804CAFF3830114640AE50D2FDA3B561B5
C63AD7EE3347804CBB40FB1E77A6C89735DD870351C3A1811591AB493251B904
314F65791963C0412377C1D02362C5E9655F1C3D4803CD379A8EF24C48218C2E
DF1165840462BF37DDE1B8D5FF09FA2C3B261E2F1A65ECFBE5D4EAD43B52C029
EEB3948CB8A252CBAF545C8FA1C31E920E23A12DD7222CEF2D2A513BD758EA13
DA33BF5FBF1D734653EB83DA2D374A5B9A0CE316F24EE375D6DF6BDA49954C2E
DB25A88821193636119D469BA66E5DAA9C92520FD4F84426A4E54273FA469084
7517817A6EE3E21176D333825E88046F50B3CF6938AF9BA79A2F51398239EB91
1A2D07F7FCD948427FF62F40FF95E39FE1A1AA8451411563FD5388472251C155
69BDE9283B41900B21EB1190D06E6B13B7794FED020D2C1BDD205AE77B084BCE
EF628249398B496DE85B406FC2E1939EF00DFC84C07E26CF72EC401BAAE756E5
7F6673216E7560D1C2A723CB405EE5CA474A07F61B81F8836482F73DC9516D67
CE0CB770EAD755B6B356198B4B97EBB29C63456953270CCC8D5650C1D006E69D
38DE2DFEAB27DAD50A817F0D645D30AF5B75A7B53CBD3D2B8D87BD0A7E525AF3
22F7ADDFCE31716914C2318260C2E2B4664893921B68C5A93334A361D94A759C
0D7B146D6FD94F0442D672BDA0F6432E18F3C5DFA37ADA378D95B75F413C9ED1
BB5C606A3EC7DFB3F796F59B0478C13FD1900381EFE0BB5242D5B5D34D03AF1D
4BDC93EAF8020E26CA23C8B0E7DDEBBC6762A557067A4CE05A524188A8F02E2F
3625DA38DFCF381727887F5646A3995A8A38A5FB1E5D5EBB395FDD0B7C8E71AD
B48EEDB62AB2CE99D121435EFBBFCEEA69AE9ED8238B60CC7288DE33C766CDFE
15B767B4AE2E6CE0965E77272AC9F86023DA620548CFAC85BC751C44218A29C9
849F1C2DCBDFAD895B54E51A569952ED50F82DC8A19F367E7E44643854EFD6B3
FCAEB04E55E4661C82D31E2932611748480EF61FB2FBFB0CFB940BEA81AFCD84
4C6A6332D7A600170E38A8EAFCD4F93DC153C43175434C86BC747348FAC61B76
1FEC9027C1A193E55C80F1F20B5317AA0A05AAA36AE235F6E49F06E570FEE798
84857D7552EA92EF3EFAD52DE39C2F8F43C59E3A957B7B926FC95FC4B60186DF
7F3523EE2AB74E294C8C4BCD8B4975E84849E0FBDA6C0B0F24A636DFA578B122
CF97BC5089E21E9F5298D1C9F30CB8BAFF6A3A11BB4D9A0A5CF2B18D055C44CA
4FD4D8FE1AF3630907DE7E585AA811F9CD11FB2C8FC791851D651009FA5DF20B
3C33FD2FF848A9E3F5652BD294965A332DD3F246C91B0ADA34017FF2451D1394
F9C3C95AAC6EC8062BE98E8914D51DA6A164AD13938693D446044859D03A949D
F9AC5DF4A000CDA98BB516D762CB9F6D44B5268FD0C26E88BC4A760C0F75A140
DEBDECA4F511128B7D2805872160C55236F0A0FA7637FF0D4E94AC079CD3C8A7
D03A5A56F26B0438B577C46011A10532FEBCAD14FBD6032E224F45691A726886
56F305231EB2FCDF59C8BBFCB5DBD2D093A0E84D62AC93A2312CA69295E937C4
8DBA1802B85F54B5E7E6D6216A918F911FF705D3B5CF055F1D873B96283A0B53
59344D910CD396D883F6F7836BA65FAB4393A773A8F6BC298069E5BA38210EED
49C9D920F718E3FCE692527DC7CCE6963BF744F2C91BC5952564196D60574E86
87A0FAB21F2DB2BD5A51D7FBD8FC19946D24E5A228462C4772F978E650ADCE3B
8D66B9C21279C531CA1C3A8ECE3420BB65837287A7222CC3673A2A5F8BBFDB60
C719CD073EF9A23675198462C7C87B24CC92D6AEE5C25AC63855CC3281494342
D28F3D2FDE0C183486769A4FD5B0143193D31FCB2C2A14E487BBD96D0BADBB64
D1B56021C363A795BF10E2DB448261C363A54A4AC1182B470C457AA82DF3F5D1
F4B329806141EBD53CAE309319B94133D7EBDC2D0453A905ADD207364371E178
0A95C2686E3B34C4A978BFC0EE968C39ABA00889BC5149162C2B54483D44FD3B
5CFF41F611C7E03B94945F414560E874D7CF27FFD0630890D7D7EA66CBD15448
229059E1C436BB33D69552B5367AB5D53591C4678D0C704DD3EA23F5D9E8A7AC
17D003C19E333E726FFFA2961F33C70F429085F7BFE3E2510F59B78F58B19CB4
01B48E184BAD9020FECCE3AF52048A056981DAEA02AE78197E65855DDB170616
F54278395D9EA50DC83761AE759F9CDEF9E1948E7002414FC05286ED793E6662
3347F2A9AF8917493D7305B92CF93E8E9185F70015F5594084298A6C2F9FD3C0
689F262AC9FEDC9B89577ECDE92F08D3142209FBCE7B5C0A840CC767BCA56C20
4E4E545E2BE4D21C53855CEE4CD0AB35D1A604C0FFFF77DBAE4289752276559F
A05FEE65F45ECAF44E95E23FAB6052195C7948AF0B1126482D4E02D72BF8AB03
DE0F1A632F7672AD9DDE70EDC82AA993678A82BEAD0BC2649C4707FD8509810D
364B5C6FE0E10772E95288C622C2F06C634F4DF8C7FD1432BC9310D5F24FEE3F
7AB324863D6DABAA1576E70643CA79EF4D7DF4105093D66CEE0F3B87D2164A7F
26EA05F5C4645B22D3E1BFD2219657712C168FD90DE801FB0F32759E80DEC1E1
43CEEB19FED12D757205043FC98FEC62D6A8D8B97BC083B4A0E985AF7850D6FD
8716B9957C1C35A0675BC53DF672C425C79F43FDABAEE7D63F092CF271C9A9D7
C41F40C4189510987887942E60A412B3EEC84C9A6E1AC7D54D528F5604B72C08
94B7882621A5BF1F325B92FF96B80878CC550D1AE4D8196E41CB1251856609A5
C4D3BD05A922D0D45E039D9450DEF8490A3E924E41434194910BF60BA1B08BE1
B41824345627745541A4F1703E956328F6227D11C74946B38CFB096139979E56
4E723B889B44C6D78673868C89912F8B4F0B4B485F1587A637B630F92E6072D5
7F3B44EA6FD96BBD4FC28A6C1D90805E3BE3E42A7BC9C880762966C55BC04E01
204D083AE976FAE6F37C94F27E68F8C0F28D52B17F6C0FD7C9150701FD78F8CE
B8E8DC9260E3974005EB5CA728171F482D765016C94D4ADFE4A42EF42212BC56
7E4EEEE8B0D2A7856CD4E44F55C0BAB762F92CB8D64C17022D4BF3A47C12F5E6
279FC23101FEE93753653CE8CEDC3B75C9CCB29BF1D4554C6120DE8EE750FCBB
E38B5D915206974962E320362E59B3F21B3AB1875703191043D03284D4467346
CFF2F98CEB4845B73ED8E003E0DC94251B73E13A9B51A3F1430BCF6A21EB9B7A
65E17FA411F53BE6432F1506232B8159E008FA257F884A4A01AC53BE91754D78
BF14A5B0FBFB9C31BF4908355F8A762052968DF526D118708CCB0B7CB5BEE285
6DAB6CD2E3934178E60BECB11AAB5478623CF6C50C92F8BB5D1A583609028FA7
B8A53B791BDC9EF76A124F3F7641857E4BEA0837CB36176EC9A522EA7F41B8D3
63C37D1145367BD300F17B54522A834BBB74DE12BF9EB26ACE6F24A046D58F89
4D4B7DF74875F1A0C1C9D97BE0849593D7B398EB4B00BEBC8C8D1497B6EF831A
A35380FFB7F1AFA4D888AA52C9482E8B1755CC209905F98F40D95B44D4DCBCB6
67423D1BC2F3560FF0A8B4F0CAC352A4EE2C1D946E45AAEC8A6AD40303F3382C
DF0756BFA3B1ED64C169E56ED1C760F2FF0E24DC5C9F41306EF8D2628153D30A
5DCB0791126BEFD4947D7EF08301FE015F2B0008DFFCBF9F2D4D859FD43EC7D9
C5BE237E9BF6665B7B1BEBB362F0C0C3A8D86010B9C97FA741C97C2E0513386C
9C26C235B14DD2A58BFDAC7B5F63DB4DA6D5D37D0098175A9071590E1DF66A3D
B8173A047C29D7D35557F06132CC920B5460B8AFC11D23D09A4E45D089F5EB51
963FA1A6256E359D485107FD143B2BF21FDE9DA5744BC2615E86C31C89470CF0
D06C6397D9FCCB316EA9989430240759D2C4945D941F159FC02327F34B042BAB
B5C3A47C78E8C1A6FBCD396B1A51CC4B020B8AD401841EDABACECDB482D6EC5B
72D2BFEB4556720FADD49D07307C8B22ACB7E310CA4151A85C71EEF70E8D15DE
B3B00F26E0E166C14647A65ADA228A3D1C89025BE059306565DB1B1EFC37D358
8C1EB024254AFD049BA977BD4C2C605050E17940A89D0D4C5D963E792320F5DB
3706682E03D25D9E02487247819551465092CC22B6B56E93F3AB528038FEC3F0
668F866707A19B0463BE706EC729D2EE1653AAC7E29BD25BFB3241D4792F5152
ED415B4E7FA92C2EE5A22E27E8B75542C492E56D811C192E95542A6FE0BFE5A5
69273C2ABED4300D491B92D2AECDD278404CB84B1BB1BD7AFEC858215837D118
C0E928BE7E07CFEEB51A6D21375B772B8248C994564014015232A0DA4BEA1754
3274F407FED0837A236371F1A32056240F2015B1E7F4B2CA72C6B58610A66F13
407CFFBA5E0A2893C1F572D50F51286E9133B5A84239C9493B0574E77D281D01
11D00683354A000C9700EAFBC1FD104EA19DFCB87470190E7E2CE26E3A6FD0FF
2620B87B82AC8686B6206B530F17E9348BC7D04B948348802CE53A312443DB87
4DBBA5313A6A2A8DAB8A1CC9A594FF8C299281C0A261C8CB2226B732FBEEDE40
2C6ACC74A1A61379E2E1CD5548CD908268A32FA83D8504C442EA0E183ADBF7FF
9FD09C037AB03516ECCA93FF048235BD11A25DB07F164512A079C5392AC7F889
CE96AE5C8D9580BCAFCC087C35E76EED1A671E87C12E3045E15A687134736DF8
DA984772AFD189D68571A2ED7256F1E204230E41D3D9DD876F938951714A3973
0CA9310489F8E807C1C7A4E51AEA5BC030610A5D7263FF7E0F9FDE3E5E37A362
5B919000BD94D978583B942EB79CF2BEAC33FEBC9A67272EB10865BA8FB75FD7
9D280AB59F91B96C16C982DE848D76D8FA8620DFD7C80B7DEAE7264350D6FB3A
EF04794DA3305844A7CF718F6D1A4A3AFF6826173A076A1372ABFC54ED3AC6C2
09C9287FC830556CA694E21CA5342ECA7B10C90AFC4783D841D7B1E34FA3DB7A
2B706F3E21B0FBAB23E7257962FC3BC309CEA2C7239A9D6B44CC96825115ABD2
AF9A2566D2F3382C01569FBDB94C8D664A5DA0F7DC3DD140CA77C743D7BC1420
324ECF9E4780280EB119885E96A6C619CE3C0C8E1E264E2DEB137E5DC8149786
486D65667ECF47B1A1E20E9E6E4FC8323E0BC8E61BDD3BCDFC6575C69C03E31A
EFFC290472CBBD049DE3F840AEE37A2486034240F80E75D8A79E0762377DF660
52B12EAA16D678990B11A9BFBC03C1D4FCDA9FD4FFBB3E88352438102F10B7C5
9F04C013B6575B5E948FAB58EA691984A0E54E6B9F3F505FFFEF74D06FA1CDF3
4B8A95904C8A2763AA8AF5B71D00F5DE09DC1CDF87A08B6D181453063E14C12D
B7BB3775A6E2A901636273D9EEB833EA8CF20FD83AE899E28DADE10EEEC20BD7
BD93085A4B1AC80AC1AE8280C14767F1A487BD066007A0D050317BD081131A14
6EA0898ED59E46DA7B6254BDCCBC660686E2EDA0E77A705A653733BB5C5497D0
B130359F866CF293FB6EF0C2AC5BAA2DB0DED045E2DED3A2612D078333260359
16CF0CCB272D34767EA069E0F0B0D42327A18529D72E890EDA6195C2688438ED
E9ACDBEED41E81CA8EB5E43C2B09CE266EFCA03F2D7FF57F12B06F9E54FCC6A6
546676F6FFC5B8B7D3F0982B6FF0D21D949309F0C0B175CC1D0976F8C55C6AED
6E821C39041E22D91AB30922F2B2EC2746BC7DAB484991542FBC82D87B487507
559AB466F73EE23C2D3194DC5CE4C9AE66D3164613AC5CBB3DB501B64DA7C91B
C7ED2EE9027FC0906820B35D4F2CF66C4F9CE4A884B7C07155BCA884ECA5EB3A
ABB83F84DB1F5639599DC7D3F51241AB5D95C3BCB7AB1EC90B4BC989F74FB354
04B2D7366A34D335A47B8C00C05CB423482BF6C7970A95545424A08AFF9A035B
7F83F52B65A9799CE76E303B85664B624C65E9CA58184C7BE2BB9D9C86A4DE5A
8165EE3DA2E652B5022EE7893896BABD88931DE1D538F615787645DF5ACBBA0B
A8E5B899A37321AA7D4B283AC9234978C2DD81813A1EE5DB6EC170DAC1B6EF02
94892635B498765C07A38D2E9DB0B7581B11056C28278F89B0E60998379C07EB
C0EAEDC32AA69B8B836F92A61AFD35688315B2C3F860632FC13E4BDFB63214BC
41CC6859EAB3AC3034449213CAB99FA1D216563419CD6D6CE4E1B56F33E6C654
7AA9DCB5B05FC068DF02AC32408C8010AD004F6CCA9887830927F8CBCD49CDB5
18CAC1EAFF815FF2F6F527F936948201565003022C6C7390B4E3C2B219FB4F76
9F12BD25CA7B3B61D1A2F8DFEE795D04D5428B42FB66E0C254AF7B7A10CEF7FD
E0B5622DF6FC4BF52147208D9A91EB49B03BB40DE7F8FBFB566F251942C8FFB1
1DFA50465919400C21CE4724D12E4EB47AA5F392BA927329DBCA28A78FC1DF2E
6FF27F4E4E3F8971D7BCB5F3FBF8F30C214A26E5E32E0E8CBC71BF20AE573BBB
163DD66E89F2C4E2B1A1532AE81C060146F755A1ABA3F1365FEA30B403DE7B22
76F43EDDF7CB0C5D3E3F2B9043D33654BDE23221D16CABE4D559575AC8D01281
379FC2AD33242EDDECAABC38D94B5261FB3D7DB1805BF7487D1FEC7799AF3403
048EDD0FA38DFDC1FF377FC051F2DF0F3ABE714B6D635B39D758282B3B98104D
669CF20010A0EB51C89E1743CE629CC7416ED4BFD444E4E1AEAA4668F6BACDC2
E130A2C4CA27DF2A20389997AE29853C275546287018C03A28533D8F962DC24F
69B2AAE5213A8B8D341E0B420CD28F260F86D5AE0485AF3D5B2B9AA9AB524E07
AC49B087A1CB52043A3F15FACB897B46D91BD4D830AA50B8025C7E752884A6C5
34D474141D11434D00687E5151B17F2594284B2E8D4ADD9509DC7F0DDAF53899
D02C08F65ECC529834CF1BFF06
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMSL10
%!PS-AdobeFont-1.0: CMSL10 003.002
%%Title: CMSL10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMSL10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMSL10 known{/CMSL10 findfont dup/UniqueID known{dup
/UniqueID get 5000798 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMSL10 def
/FontBBox {-62 -250 1123 750 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMSL10.) readonly def
/FullName (CMSL10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -9.46 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 86 /V put
dup 97 /a put
dup 99 /c put
dup 105 /i put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 114 /r put
dup 116 /t put
dup 117 /u put
dup 122 /z put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE32340DC6F28AF40857E4451976E7
5182433CF9F333A38BD841C0D4E68BF9E012EB32A8FFB76B5816306B5EDF7C99
8B3A16D9B4BC056662E32C7CD0123DFAEB734C7532E64BBFBF5A60336E646716
EFB852C877F440D329172C71F1E5D59CE9473C26B8AEF7AD68EF0727B6EC2E0C
02CE8D8B07183838330C0284BD419CBDAE42B141D3D4BE492473F240CEED931D
46E9F999C5CB3235E2C6DAAA2C0169E1991BEAEA0D704BF49CEA3E98E8C2361A
4B60D020D325E4C2450F3BCF59223103D20DB6943DE1BA6FC8D4362C3CE32E0D
DCE118A7394CB72B56624142B74A3863C1D054C7CB14F89CBAFF08A4162FC384
7FEDA760DD8E09028C461D7C8C765390E13667DD233EA2E20063634941F668C0
C14657504A30C0C298F341B0EC9D1247E084CC760B7D4F27874744CDC5D76814
25E2367955EA15B0B5CD2C4A0B21F3653FCC70D32D6AC6E28FB470EB246D6ED5
7872201EF784EE43930DC4801FC99043C93D789F5ED9A09946EC104C430B5581
299CB76590919D5538B16837F966CF6B213D6E40238F55B4E0F715DBD2A8B8B8
80A4B633D128EB01BB783569E827F83AF61665C0510C7EA8E6FC89A30B0BC0EB
5A53E5E67EF62D8855F6606E421BD351916549C569C7368AAFB714E22A023584
8B1D6B52FC6F635E44058690002C6BA02CEC21C54CC8875B408A8BB84F445894
5D6B3E4841CA20AF852A660FE9C832F773691DC6F7197FF3DEAEE97418A5ED2F
F2AE65300416227CD3BB03C29003C770CD7D2A7A2E4C1DCA193651C2CDDBF93B
966938788694BFB562AB0010268955FC3555E5984CCAB0A9B7590C77C9BC713E
A29E5BD7193A4E971D1752DDD0F0AA4648E7E87BBCE66A1E836C715C408B07A5
9EB56BEFD4596706CF839BA4CFA90CAD4038C1E006B51913279A2C31FBEE5BD4
A7D74F9103CE6124F5B439CB860987DF44FE17EF88EF1BF62C67060D25696BCD
94ADF08F04E349CEBDF9D3389D870D94CC05E393B3F4362A13A6A672EE5E8F5A
DFE7046AFE3EBAEA58FFEBA4A47BF61F92E2003756DA643CCF2C9DFCCAB62669
E3C2A18D690B64D907F50BCA155A85E47C3A6954C6FF7ACA36D8DFCE777B7929
5F5D5F787B9C247ABF13D6D7B4A8F06BA25CCB342F8A5071325CDA86AD71BA23
8A9695C7D1D50D0AAC267AB7CDBA7AAF46A264B7B081B7E79AD937FEE4969FD5
155A99E652461EFFB4BD010E5885631E2B2497D6B8C43CE77D7D47FE201DD46E
4482FFDCE150A1183C22C004A0AF0E1F42AA6804E038E1DFC8B0A3CE26B52038
44D2E7F759DA5C252489E5525963D68BC27C82247BEB18818C7D4CF0BC5CC97D
8C701034B8DF798DD4CE36C3F8B1FD40B2DA14EA75583852875031AF8C909EE0
04495FDCD04B05A5EFEBA56A8CAC1F57F1B8AB91FB25C81CD51EE69D6E0F52CC
A0E12CF7E3187D67DF71A599FFD895FAA7BF80E2E6B96592BE77AE96905BAF0F
F547355A36C443797DDA7C414AA606CF9153E03450B77D1BA4088D739DF55F07
111B9E11AF37F45B6EDE6D7AC126E05886A57C83886DA87761BE600DEECD1344
8A82BD652BE7ABFE6A0F50ED7C6F4EE12CDFD80CA7A5518692F267C51C3FE76C
567BB8DDBE09A2AF901F79AD02B435287CB8057B3D5EE6655071F67B00438728
C4C3EBD648BAF650993AFE5E2B29074A99ED0FB725D9B8CE8B0292B08A280214
C3AF252BEEAD30C88F72E322FAC3E9D78A1038F5DFC41F7BF1AE3744A0677094
51B77C2D630B67853FE5E975A395C06A4D4DA744040B272C2B88D8B7ED3A2C01
66F503C9DFD3C7DDAC865900D2A4F2CDF517F449851DB1963468D0266D7A3E58
9F6B2A1843E6444274F16A9930302DACD8D2BC4588765099A86BCCD8A31DF0E6
2853114DFF2D19F812F19AE6C2E419D7AC1BC024D1195074FD0C6717BFB389A4
4D5428E7BB2E4F9E9FDEDED7BDCBDD3460805AEA0B5F6460C2FDF19273CE5BA7
5D3AAE0DB94C6AFA8339646191C23B0149E7CBF136FC4C844E025A38935DF256
0A0A6466A45EE8B9B23B6A055856FB084F87C73BA28F1883E3B184CD813C72F9
233B78CA4E125ABD26F29B92CD9DF39D6FDC2A217E2B6B45D9B0A4D536790A5D
BC0903069565A442FA7466414D948AC432C6B75D8D0E1DBB217CA3DC38A52DEF
62E9D5AE9E753956C13819D93148C7683BE4F71B80BC066D8C19FC807FB1C086
B49215DCF56A91A42089F0D063B9981925691F7DDE3237403AC714F5CC3ACA88
DB2F1DD205578C00472FD70C8BA4F752E3923ACF3164D442A6B639902ED060D0
C5777BC20F9A3BDA60FA3BC986C38136FBD2E8F910E32EF36377C9CC187F4AFA
CCEC423DB925B378522B748BDF12D523804CABA83CB5A7ED69FAB9AAB75EE8FC
38D9866E3754C4E2F2B9AEFA804044D878DED0E114EA0E9682FCF38F6628E63D
FE1C1B5615E54FAE8684566EDC4B616F76EEFD6207E0386F06D3BFFA26425F24
303CC7C8A8D7021E7D09B202616988287838C3DBCE3179B4FB5C726E603A47F2
8248CB508F327D1291CF3F08F7C88298DC2D0F778D24304EFCF6E074182BF5B1
8E6551811FD6991971692108E289B61053D6DCBA2925B3903E8916EBD09D97A2
C6D08E89DE4C0CDF7185E1E00DF456B249F0BFC686E04FDAAD2772DC2C39DD53
9C23A41471267F53A87E5C2B8CBCDB66CE0B9844BC506428E6150B48D2FA6363
4FDB2CEDFBAE0B7DBCE4D83E29B2955F8966272CB865EDB360C8A8C19EC62A29
03066483E4083524A1E8D80FE3867BC1AA91753C26ACBE8489AB0E3330206212
93E07ED473DBF457EB8489E66FB4B8ED8A9EA8911CF9308CFE3E6D6F36810EE8
91CCB11BD548617B2C683C354452B9229E7C9E68828BBEC324420DF7C188CCE0
FBB514547553A7E9B38AC265783891F42DA472388569C8E7594F7E8810895A27
06E456902A8D9F65CA808F1FD475D011C4572F8A654BA01D67942226A663D179
95149FFF41A9F55AE84EEB9A6A39C017D7E4FD6EFEEE7FF3CE847CDB064A4954
9DCD273B810E0F259501BA4003A3EC1ABA6E13D24C0B57FF82D6DF077833B6A2
7EA54801BA81DB961C261689C0887FAD83771E55D3D137AFBB21779397E11972
6C6CA922F45AFA5C0526863A5AD8B9C0775CCBA17FFD37A44CED4710884DBC31
5C9D3F5441595B86CF7CA2EEE42AE87896E9E60EBF5F35C2B7FDBF9A9CDAE262
3F48396F0F741E9DDF1D4FEF75E68AFB020D06CC29B3A7B2ED819D1AABC12B91
CA2A65F1AFDDA2F3FB322E0268DBBA024663E49EFF076455338FE31A16B04EC1
797EAB0B49AFFB906A0690A1E8E2F5314773E1CCFFF43E6FB3875AC907F0C5D0
DCB9BCC127014D472463560CA0CB1C2CE614D94177C7A52A5B089316689C8112
CA57E35D716D956DBF9013B1E5B9626456B1433C8C15FA906458F957133B9E19
8D46DC3AC015F7602538C2AE3927C6DDBACF38E59220C2F5AF36B68DE9117C51
04CF7DF32B1AF55B87D1D8A5F4BCFEC66F63B32B6548DEDA3AAB06C5310E4757
78AFF947DA22809B360FE535506A554DDDE5A6F2411246653710ECE5CD3185BE
730520A766C47E1ED01890059882BE1432586864E1A86A7F586438C8DD35C00F
021A741ED47E0F16DB6070ED0C50038632CA4AC2975578A8372A080CC0447C79
CEABDF2BCD5E78564247B0F0025F556DA8FB62125227849EACFB724A4AE3EF57
90C07A5B27D2E59425F56BF8AD84C5F5310FEB1BC73D536339FC2E6A5BE2DAFD
97FC835E0D52F680F80ACA37DB498AACF152B9B44626CD89E3302C3EE1623EE0
F998FA78305960AAB9F483F731F5F67A8C963C23DB8E48FB804EF8B86FAFE7F9
4C09641915FA7E3930AC922682313408BC1607C76751CEEAFD660206A39CF394
40ABE2A313AB7D5FD6444E219DC5C26734D322BA268D330AC17959A390D6C8E7
3A155095BDD66516DAD5D65519A7FB871ECDA77061EFB21F359158B4470EF79B
362C35C06B85C9A9505C8361939C6AC013F2CFE8EEF46FD8CB4452AAB3EF1FA7
DC066557BADC2ADDDF7DDC2A0E1DD4A357E27A2073427EACF9B9035DA5272136
7DF37E26D96ED4B2ACD60596E039BCB15E259C72FEB3344E3EEE3D4F17DF4233
04C1416BCADE80BD483DD8C9AF979E1C7D50C4CF015870703F88B92C4FE46AB8
DE6717B55C460C805B391B84333097E116F4A51F631FAFAB34CFC925BEE8B72B
C9FD5F5A79D8F2295FBFAE649DC6AB47794AC7D73431FFE5BE992F2B5AC67049
B5208251C0E442385A9FACF25E3A98D7F5D4C2A1ABDC600AABE84769CA83350F
9B87F71CEAD3600E02FF9AC03C1B5C21C84F911511A0CF0111BAC7605EE31229
3C526A79D943D92E1CC3C38ABE82D560CFD4172F318030852A5FCC0534B8B3FE
D7365987C8B48A072907B26CDC2108130A33233E8E0BB5FDF14FB55098A10EA2
B51AD9EFB119F82B08D256D396D3263FBD9DBF172D43A90ACD1A31F3E89E8571
74BE98B9560E2CD661A2F93C69FEA3FF26B00772AE2C2C24B98D3D122EA2AA8A
44652CCDF4EF4F01CA7D62A976E23E8A86291F43BFAF38FD9C325E70F9C36CB5
A181DAD30156E98339E6A0498D3420B7BB3B4E651A9090D4A17604AE386273A8
3D4AE8CC18345E6E19DF06BA848F203F74B161D6A8882991CBA7385F308696A1
BEEB0130D938A764B98A2001A38489B1334025EA848CA44A116D64926D460D64
01159E77EA7ED9ECE7BA77635BE564A4ED89315BDFF54ACE6AA1A26591D13CD4
6D6425CA7933769B842192858D10998509396829263290A3A7CFEBBDA3EE6CDD
DF1E492AECDFF7941B53573F01F623CA0A5ECC9D05A3D0954F7AE8CE94AC3B2A
CD4E27519B2E16F033EB732AA024BBAF74626DB55DC74B1FDDB07FAE98B4AC5C
683CFD8744F361838D343B657EBF52DEEE7AEA7565C5BEEFE455DDDBC4DCCA7D
87D6D769C5ECCF14118A14A85A86865777C8E28F953160D5E82844AE54D541DF
550D5F1519E183E0C42BE88F0458CE8087F2CD4B1B49A8E9E3D127C4A4CB74A6
2E73BF4CC317781D03FF04BC36AC0E4AF99E2ACAD20F6F8029DE8A035DAB40DB
17D237850BCDD05931FF4B0FE2D0B79EC5A88FE0236271CCB075BD194AA25AFB
3FB93A5206F61A14602E4EB6F1C31C654527CE0C02D04314DF9AFD710D0EBB9E
F8721B97F5FB18E27507E1F800B5509A58A1A8296C72B7B73F99B6CFE42E9C2F
B63B3555475E562672645CD374BCDE937A9B05A157FB3E74C8297507253E957B
1A9DC421946734CEFA3D5EE357DAC7E9DE17A5BDDEF6B2D2A740BC58128FC514
61154664412BA1C05209EC992A77B7CA45AB7C0EEBF590A5B5652866008CDEF7
124A3003AE6A7CF9DF3C72750CBD281358CD2FF25B162B78CBB971DB3477F8D2
ECA3EE9CBC90323B2C236E375337EA0848CD7CB5781A2B0A42DE7E4D99DB2746
0B26796CEE129D23C76794B7CE21C13C7D4A998B752C8CF43A4821B736EBE246
D2A2BD7BA3351FBCD1B0A501EC1EAABE60D06DA2FE39BE1F0AD629769FDDC933
F9D02F9686EC8C2D7455C26AF4DD3F6860B2289E3A30E1C254AD17D731CB73B2
BF4DFE90CAEECE3ED0CD3FB4C8F4C7BE1C056AB4E9B95781A8968E3CC1010003
75DFBC4AB9F6B27C5A9AD88D94441A8ADF09EB275E5F0E5E6F3BFEA0FA8C308A
8593ABA0645ECA8FDC3F0E264B35D4B0DDB86B93CD8A047FC409E18196B501C3
B003622999C47BAC04FD1ABD8AD359C977766E9643EF3BD6385306B08EE3E13E
7DA5A06AE33D17A3D574C6390DB6E9429754B210F0C349C359559C7EAA2350BD
F61D4D8A92B1AF697BC620FA0351E67E0D9F41A95A47EE0BF210C2C48691901F
F905F65693DCB85BE412F097480F6A7266AE0A928729DA0F691CBFFF3B276EA7
322BCD2206D96E3DAFDFB992CA8F2955F0E8B882729DFF840569D12E4DA1775E
523AA734552AAB6F2F16B89B39F1A3FF0E07EA08D13E612F201716C67F327017
6C041760DA30374434808273062C1FFA2C47B3FB578807BC26537F542040FF77
66C995EF3E8B08B09FCD3EE89C30F157158A739606D2CEAA26694A4F1CEA6633
B54933141CB85C60AB262E2D4E824A3B85C2BEF810DD774F296AB37D0BAE7182
5648CD18556ACB124246A75474B232D712C2358908B5D9A76F82C626BFDE01A1
093B8FA6AA0B32F2CDEF737B28BC0448FF816DDB5812131DA0DD5979D77C3838
B978CC3F6778A4BFCE9A7087EFB19749285AE4C92B99A6649DA349A2E0889D72
6D4FC664522F06C8C4D86D30BA43ED4E42211217D01636A4E17E2A132D26F394
EC34EA12D84594AED9C6CDBBC0908860F39B240FA7D7B3003DB10322498691CF
A294C0FC7ACC0BAD1EED3E9D60AAE3F7429695892D1A21CEBF062C6129B33966
8B2EF6E932F9891DE6028B81C5E9B23278D35B7F0D83989BCBA25E20E9D503DE
144DC485F09A4EFA1268AC5E4B551C5B2F1D51E9B9B9C0FEE585204F869D0BE0
7287D7570A12940A47C1F51AC6134F03B415C30E147C49F89228855D093EE55F
172711F37776E97A99CC4B36E2F10713E36FB279FD3FA5A0EB9F3938F42E2BB9
254EB8F0C0F30391735019E02BFDA21D9813C6A22279B898EAF01AA892B14DC6
5912B9275167AB46EBC420836CC1A5F38A4EB47C039A7BCA62BC3FCE4199FC71
011DD6E5FFA0F3D7F04AC02AF91B9249B9F993AE346572329DA852115BEF8460
B94690E790003586F473F37EAB5AC2922F5F663EE2C3C0C336A8DB71650631AC
0A923A389AC911CB215EC2EC7D50CF8AEFD59EBFFA53A9F1FFB7E6215F17093E
3975F186FE23BB5FA5474C11408FABD223E1E6F62035B5A5C1AEFD8899F00FFB
E729C2D5FD551E80716CEA4E8281660286A802AAE8D5834F37F2EAC46297E57E
993B09251DD7789D3467417E393B7DEABD06676B96241B0E43ED1A1A9FC3B12E
0D34B2B0792B79AA648FE9450C3B209FB6D7D91F50C52A5DAB0BC81A8B698BD9
18946EFF691912D7348D48FE68CD876FC6F71F81165D0C3272DA1A992308D9E0
ED6D0A4DAD679AF495F62B78D462B463BD4A40931172290C615B3B3B6B47E45F
CEBB85E0A6AB6832067CA6D403C239530D07F199788AA4DD52553836851C5228
1072406F6D7323A334E7A7FCA588897C4FBA6D4F7DEB65525EFB74E539C988C3
A685A98752F7198E77E456A545F0D23A1BEF81EF58B02D289CF980A3F17BEC8A
6F83DD90C4A917EB0E5E2B444A608E2E9D2FF80620E16AC1D7775C0A10C1299B
BEE0E1AB24C50647E5CA1DA65CFF3B2C295F0644CA7826E1DC6FADEA93D66A20
DE852F20AD224D28DB900519EB1569837139C833F24B799F7EBE3FDC14235323
1D0BCD4991C861F38DF413A5A5588B73AEC3BBFDB885CE17BB3E97B4E6A79761
93EC8418C2BC4725CD61B5E30C07352F647C3FD50083878C13CFAC241DDCB082
E53703D182068727F9EB6FACEC25F6D901D7309ED7370867E34E267519E22D62
4FC7093448BD0D6B1C43D318A3E14C92032325C132AE0FF7ED707E1FA4A955FB
F5224BE0045CB14ECC321D0F333FE24EEFCC504F7C756451D7693C3E6CA87526
4912E1B6DB935BDE76FBFAFCA4ED473F1D2618812CFF25A6859C626A216603C1
361BE3E071FCFEC2D4BF2FEBDE07DBD56A1BFF8303901168FA06488BA6B76F36
95B0A90D7724E9ADB567C2ADC65CF3482CF47FD1D16F70AA19A97D0F9EFC611C
AEA5E1ACCDA7FB2DF05E9480936281484BC329F0B771775E73F7FD72FE3F45F0
50ADBD03932B38F37A8F0A66B2F739EA3AC8811C8F514E68C5643E4AFF485C81
88475A523D7FCCA5C8809BD49846C77795A38DC6406082000236A4D2628B5932
AB7916D44EC2210CB941B4C12515E844F0D26CDF0AEAD63BF1491BB50ED4D6D2
739930E80E26E9B425C25033121899AD22102AE6868648BABB7D5985611C95E3
5B8D365C7D034BA22E904A0ADB0132CE38288C127BBEA0825E600D18383A6854
EE28FD1B2F57AF704854AEECF985EEFAE0521DB38B0A7511C803CE8AE0D0BC02
50744F806B8D771AEA2192F982AC81386B96950F174FC5D149F6345B043A9C60
E098BAE0709A4A16C3F585F81454AC7D54754D04F951E6A0D3DCF516F1B417B3
4D1BEF48C8FC4FA1756BCAF384A9699BEC41E07A77C590079DA769F667890607
0233878C31D2150F826067787CF5F86496D3A318CE6C47B6CD94A540BB57634C
F62785AF68B52448771F5158842C1BAA5D25EF33CE9E319040CFC070388E0E49
B8BFFD4432036BCD1D2524DA8562D5DE1659F17D073E1B959881F493AA2AA586
49DAB5C570B1DF45D55A4E1206F2D3F389E1DB8FB7963D9B58583D745F1AF105
A39FAF12DC8EEFA8B80C9BB9E59E10D5F3A5E2F4A74F2E98FDA4162BA0B50DE0
19711422E8D7266789FC9BAB52C99443F0735067D8C0F31C45A458E3D9FEB619
4A7C05F7E10D7E0E8276902BF13B61DC233C00E8EADC926E52DF0B1375364DEB
50132D43AEBC0E9AB885C0CBD0D8A7F982AE48CC907377B9685D0E00DFA935B9
77580C120829396E311E02556CEC755C827B09F83D76BFB249EF73E12D56B5ED
B8CB96DDC42A1DF7B7AB27714E2AB2C2644E32948C1C53E39BC811D583F84877
D6398B075AEFA3073C3739AD9C0BB4D4F4A1FA2F6CFCEFCBEEB1D8BF19828222
B8BAFBDA13946F01FD1FFF92F2A7C06BF5F892294371049690697A7C0BB4C199
EEE2D5BB9B10B58B2C3F3FCCEEC9D533F2C20C72C027DF856F11F54BCECE33B6
D781EE38628987B97DC7E33A7E9BD8F5E4C944E0C7652C04E13C73E301BB3CA6
81197DCA92121E7AC84A2831D271F97162F219AA811B71312BBF4FF0C22D2116
4A6E09B155373E87A7625D6FDE9523C9760D62582589DFBCF929AF5D04857713
501A2644AE0718BBDC6AE47841492199F4EFD0E965AE086CA541F857CFA0CD4D
5565E4854A6AC1E94CE5AED90A47699053CD10D33270B99B14DEE3FD98CE6E26
CD12304898D0FDEB8448FD29E63EDA36D14C2398D1437A44EE0EBDAC169B6E42
E06F61FBF4F54F8582D4D67B5E6B5E77167AFB4C43C3C987FD2F0C9C034CE33F
55AD7CC21CA7B2B0E6A2EEF90F524EB15A02EC7B03052853F984CD6F2C76CBA6
B2F659FB8DF41BC77062EB81A71CFB1D49F4C42D75D661F33497033A6DB3B1A7
7019131D7A875F1B2D537794F360EA7622061A17F96C84760A73F3B29E3A8EE0
694E72ACB99F2322C3769EE6F8E3F5203AA013F551B40BAE414F79A45423DB25
53B6E93B7ADEAF4D863F325554BB347BF6AA264BE4750DACEBD94BA1AF3DD9F2
A20460211128BAE50E72E292827B5C6F56A25822E30EE8DD4EFE4759566FA8F4
53C7EB29885A11D100A98820C8D8A7496FE3BE02E714E5884B35C383CBC9ADDD
6EA19FFE8A96E909E3FFF8E952D0751262261AB5E89E54F9F441A19DD97C9E99
DBF543391D7AAC6CF604A574508591B10820AC9E0F82FA1D348C8DC12AAA6598
A44C8FC50061AF424BF981C3EC6F9BE8C5754D4653F62D54BDDEFFE835AAC929
F60C0807E2FBF7E2EA7FDBABE6B68EEF6442BC3F39E098E0170A05B1F64236C3
93B287C1374A850D005306A389414AC02521E46BD76E6F95937467F7C02B6761
F8C151E986231B6FEF58B5ADD61ADC35697FDF125D6D9ACAF980AC562B628D9E
CC49CFE429DB2F59DFF5D3CBE462B961B45D8500C0737084DAA895115A76AAAD
0D2D5EEF49F8456D7F5A2A703624A15D530FBE42434D2D4349A82107087D63D1
8988CEFF8DB4EB1E282CCB11301CFB3237B1B797E137117A1CFCCA537A291DF4
AD817B82B9C72F5FAE54262406F9029C7874A4927A7F74261F4D4F7DF0ED6333
C08664F1135F77F5BC79F3282D5C1C0428669DB7B1742FC15886A14E324EB11D
B3CA389D0EA61EDFF1CB438D4B35B81972FF8D81D8D42F0A83A72BEF19D7E8DC
CA70A8DF9361CC4036B7842C3A5BACCF852831B2A2844A9C77ED39D58C151CD5
D2D76B1305ED7126659852748CD7FFDB675ADDF5BBEE41547893100493631C4C
8454F8AFB062F7E920E050733583424F955013DE400FA1700DE0CCDD77DB4529
038F971E657EC6118EFC5A56A937EED191D94C1946672DC54BA44EBEF6D84C50
0AE9E4031A95ECAC9793D20EB2554D024B9AF1DC9BC2319E56680625D4A2D2DC
6AF44B0E99966195CC7494558D86713693BE150751AFEBF4B11A90887C3F3205
BAA5810142968BDDD84E4967A7D9AC05D4D540DF5DB9DFFC34DB912F41D93903
7F51FB93CF81CDDC9BF1511B910C308EDD4106A8EB3B15AF01BFD1A542BA359A
B5BFF346F511B2C14DDA48660A95940BDAC5BE0372B308925CF0F6C10AE8A51E
7117DA7C4AF2229732D46F766198709FCE70B503EF82274FFDA86BE515C01471
82AF0DC1AE103420A9B998F6A2B2D813E0292770A1C12202F33615A4D3639D4C
7B2EA3EE9A569911F1913B73DDD6C1BFA07F03DA2D2476AE267FFB931B4DCCE1
D4C53EEAA3D1F8BD354FD85511B91D0D26A60043377AB5CE0FEFF52E09D17802
44D16269622123D311D53CE42B56C6FDFEED0C7F0213133A279A6F9910225240
6B77F45BFF023C96E96211441C7CE36178AF88157E1BD123051B2B5F3E1E6407
CA7E6AE4A643021C17621697AF7FAAF4ACAD1D40885405730656898FFC2992BE
ADC7E5CF33018D3ABA4F20A7BA3FC866334FB4303B12BCE034E537A3A0E5DB93
34A8F4F2CE3C099F8A2150F358FC98CFCE7982E699C448B9251FDE6BCD5BD25D
51283D153D2BA7A919E32E29CF31060D16015B772FB7ED915C9CCD69AE844044
C96E40B2F20756DCBBA86536715D325E1913D1E26F888751B7C7B34FA8099C44
8D9225F845CCB2B83568D0D43C32E3CEB6912F210C7EF3E3E11E9CFB4CCA24CE
603DF0EC808F72498AE24FA3CB1A4458CA33D0DE1CCC61EAF4F1FA7C377C72FC
08FA51A2611EA62EE86938FAD2BC85A6C337D13D67C17E28DCA0348F7D996F02
D87559A90A50BDB907C504F619E0CD4887AE27DDF2BD3014961634BC6FCC7E8C
DAF6DD7B3F0144D1712F2B43FFF24F4E2EF1DC953BF02616FC12B62E0BB4B348
2FB126D33D7237C0A5564D05160C6463D96CF18A9990D9622CC06BBAD455C304
889BF8031379D4CDE5E649493636495E12802C1793E61843376CBBE40AD36465
25C2A14C10CFFD5D902466786C5A6E8106AC3499635672B6E602683B2F4DF97F
DD2C9D8B35176F3154E890D56F7118C8232857B23B575332651E4D5901C13ADB
F94BCAFD8F5A341317C75F6A47FCA372B440BE4A122771895473C5C63743CF5C
3A6FD94CED828E99D0E7337162312D9C33394F23C5B991CA6573727E25D60656
49EDD4AA8B8445470ABC34394CB4A0EA199BBBE41CA9BD61233B2B8513315954
D34502FE3950E27401C1C5F83CFD4BF6D7DB8DB7178D93E8E4A3C59DBA1FA62A
2F2F676B3518794F7719A26A8059D97D39AD037EED907194E634B090FB920B09
1B5668527F345BB88EC2A596F46A69E6E990694BE65AA1FA235121A1E105F74E
47D1988BF9AB835BFFD078B55E9CC12CEC2678D1AD49DA5AE9166C4006597819
6545772814B4003EF355B5131C56C450C0ED7F6F42FEE4CC14F9386F15A019E3
39F3E739C5E466601F0759D5AA336D3F90737D0465ABBF7055FA0DD922591B0B
0B2D3C4268599CF17EFA3C92480FD44C50A6512A6F0B89C8D1B2793956B761BD
9754DBE09B2784453BB80C59AD1D2D05344A31BF1C1006A7990A9800468110
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
TeXDict begin 40258437 52099151 1000 600 600 (Feynmandiagram.dvi)
@start /Fa 206[42 49[{}1 83.022 /CMR10 rf /Fb 133[37
4[46 32 1[33 1[46 42 46 69 23 2[23 5[37 1[42 10[62 86[{}13
83.022 /CMSL10 rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
%%BeginPaperSize: Letter
/setpagedevice where
{ pop << /PageSize [612 792] >> setpagedevice }
{ /letter where { pop letter } if }
ifelse
%%EndPaperSize
 end
%%EndSetup
%%Page: 1 1
TeXDict begin 1 0 bop  0 0 0 1 TeXcolorcmyk  0 0 0 1
TeXcolorcmyk 0 0 0 1 TeXcolorcmyk 0 0 0 1 TeXcolorcmyk
0 0 0 1 TeXcolorcmyk
 SDict begin savecolor end
 1532 1270 a @beginspecial @setspecial
 restorecolor  0 0 0 0 0 0 0 false  false 0 0 10 0 add 10 0 add 70
0 add 10 0 add 0.5 1.0 dasharrowdoubleline


@endspecial 0 0 0 1 TeXcolorcmyk
 SDict begin savecolor end
 1532 1270 a @beginspecial
@setspecial
 restorecolor 40 0 add 10 0 add 40 0 add 60 0 add 4 3 0 0 0.5 1.0 dashdoublephoton
 
@endspecial
 SDict begin savecolor end
 1532 1270 a @beginspecial @setspecial
 restorecolor 40 0 add 10 0 add 1.5 1.0 vertex


@endspecial 0 0 0 1 TeXcolorcmyk 0 0 0 1 TeXcolorcmyk
0 0 0 1 TeXcolorcmyk 0 0 0 1 TeXcolorcmyk 0 0 0 1 TeXcolorcmyk
 SDict begin savecolor end

1117 2275 a @beginspecial @setspecial
 restorecolor  0  0  0  0.2 1 1.25 0.5 true   false 0 0 false 40 0
180 100 0 add 50 0 add 0.5 1.0 arc2
 
@endspecial 0 0 0 1
TeXcolorcmyk
 SDict begin savecolor end
 1117 2275 a @beginspecial @setspecial
 restorecolor  0  0  0  0.2 1 1.25 0.5 true   false 0 0 false 40 180
360 100 0 add 50 0 add 0.5 1.0 arc2
 
@endspecial
 SDict begin savecolor end

1117 2275 a @beginspecial @setspecial
 restorecolor 0 0 add 50 0 add 60 0 add 50 0 add 5 4 0 0 0.5 add 1.0
dashgluon
 
@endspecial
 SDict begin savecolor end
 1117
2275 a @beginspecial @setspecial
 restorecolor 60 0 add 50 0 add 2 1.0 vertex
 
@endspecial
 SDict begin savecolor end
 1117 2275
a @beginspecial @setspecial
 restorecolor 140 0 add 50 0 add 200 0 add 50 0 add 5 4 0 0 0.5 add
1.0 dashgluon
 
@endspecial
 SDict begin savecolor end
 1117 2275 a
@beginspecial @setspecial
 restorecolor 140 0 add 50 0 add 2 1.0 vertex
 
@endspecial 0 0 0 1 TeXcolorcmyk
0 0 0 1 TeXcolorcmyk 0 0 0 1 TeXcolorcmyk 0 0 0 1 TeXcolorcmyk
0 0 0 1 TeXcolorcmyk
 SDict begin savecolor end
 1117 3279 a @beginspecial @setspecial
 restorecolor  0  0  0  0.2 1 1.25 0.5 true   false 0 0 false 40 0
180 100 0 add 50 0 add 0.5 1.0 arc2


@endspecial 0 0 0 1 TeXcolorcmyk
 SDict begin savecolor end
 1117 3279 a @beginspecial
@setspecial
 restorecolor  0  0  0  0.2 1 1.25 0.5 true   false 0 0 false 40 180
360 100 0 add 50 0 add 0.5 1.0 arc2
 
@endspecial
 SDict begin savecolor end
 1117 3279 a @beginspecial @setspecial
 restorecolor 0 0 add 50 0 add 60 0 add 50 0 add 5 4 0 0 0.5 1.0 dashdoublephoton


@endspecial
 SDict begin savecolor end
 1117 3279 a @beginspecial @setspecial
 restorecolor 60 0 add 50 0 add 2 1.0 vertex
 
@endspecial
 SDict begin savecolor end

1117 3279 a @beginspecial @setspecial
 restorecolor 140 0 add 50 0 add 200 0 add 50 0 add 5 4 0 0 0.5 1.0
dashdoublephoton
 
@endspecial
 SDict begin savecolor end
 1117
3279 a @beginspecial @setspecial
 restorecolor 140 0 add 50 0 add 2 1.0 vertex
 
@endspecial 0 0 0 1
TeXcolorcmyk 0 0 0 1 TeXcolorcmyk 1570 3379 a Fb(V)-7
b(acuum)28 b(p)r(olarization)p 0 0 0 1 TeXcolorcmyk 1926
5255 a Fa(1)p 0 0 0 1 TeXcolorcmyk eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF
